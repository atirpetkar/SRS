[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "learning-os"
version = "1.0.0"
description = "Content-agnostic practice loop with SRS scheduling"
authors = [{name = "Learning OS", email = "dev@learning-os.com"}]
requires-python = ">=3.12"
dependencies = [
    "fastapi>=0.116.0",
    "uvicorn[standard]>=0.35.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "psycopg[binary]>=3.2.0",
    "structlog>=25.0.0",
    "pydantic-settings>=2.10.0",
    "pytest>=8.4.0",
    "pytest-asyncio>=1.1.0",
    "httpx>=0.28.0",
    "ruff>=0.12.0",
    "black>=25.0.0",
    "typer>=0.15.0",
    "rich>=13.9.0",
    "pyyaml>=6.0.0",
    "spacy>=3.8.0",
]

[project.scripts]
learning-os = "cli.main:app"

[tool.hatch.build.targets.wheel]
packages = ["api", "cli"]

[project.optional-dependencies]
performance = [
    "python-dotenv>=1.0.0",
    "uvloop>=0.21.0",
    "orjson>=3.10.0",
    "tenacity>=9.0.0",
]
dev = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.1.0",
    "httpx>=0.28.0",
    "ruff>=0.12.0",
    "black>=25.0.0",
]

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
]

[tool.ruff.lint.per-file-ignores]
# FastAPI routes: ignore Depends() and Query() in function defaults (standard pattern)
"*/routes.py" = ["B008"]
# SQLAlchemy models: ignore string-based relationship forward references (standard pattern)
"*/models.py" = ["F821"]
# Alembic migration files: allow standard boilerplate imports and formatting
"migrations/versions/*.py" = ["F401", "UP007", "UP035", "I001"]
# Test files: allow more flexible patterns for testing scenarios
"test_*.py" = ["E722", "F841", "B007"]
"tests/test_*.py" = ["E722", "F841", "B007"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["api"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]